version: "3"

tasks:
  link:home:
    deps:
      - link:zshenv
      - link:config-home
      - link:ssh-config
      - link:gpg.conf
      - link:gpg-agent.conf
      - link:sshcontrol
      - link:cargo-config.toml

  link:home-file:
    label: link:home-file {{.FILE}}
    requires:
      vars:
        - PWD
        - FILE
    cmds:
      - ln -s {{.PWD}}/home/{{.FILE}} ~/{{.FILE}}
    status:
      - test -L ~/{{.FILE}}
    internal: true

  link:zshenv:
    - task: link:home-file
      vars: { FILE: .zshenv }

  link:config-home:
    - task: link:home-file
      vars: { FILE: .config }

  link:ssh-config:
    - task: link:home-file
      vars: { FILE: .ssh/config }
    - test -f ~/.ssh/config.local || touch ~/.ssh/config.local

  link:gpg.conf:
    - task: link:home-file
      vars: { FILE: .gnupg/gpg.conf }

  link:gpg-agent.conf:
    - task: link:home-file
      vars: { FILE: .gnupg/gpg-agent.conf }

  link:sshcontrol:
    - task: link:home-file
      vars: { FILE: .gnupg/sshcontrol }

  link:cargo-config.toml:
    - task: link:home-file
      vars: { FILE: .cargo/config.toml }

  deploy:ssh-key:
    requires:
      vars: [USER]
    cmds:
      - gpg --export-ssh-key {{.USER}} > ~/.ssh/gpg.pub
    status:
      - test -f ~/.ssh/gpg.pub

  fetch:lf-icons:
    vars:
      SRC: https://raw.githubusercontent.com/gokcehan/lf/master/etc/icons.example
    cmds:
      - curl {{.SRC}} > home/.config/lf/icons

  fetch:gitui-key_bindings.ron:
    vars:
      SRC: https://raw.githubusercontent.com/extrawurst/gitui/master/vim_style_key_config.ron
    cmds:
      - curl {{.SRC}} > home/.config/gitui/key_bindings.ron

  sync:etc:
    deps:
      - sync:fstab
      - sync:locale.gen
      - sync:locale.conf
      - sync:pacman-mirrorlist
      - sync:resolv.conf
      - sync:systemd-resolved.conf
      - sync:timesyncd.conf
      - sync:systemd-timesyncd.service
      - sync:wsl.conf
      - sync:drop-wsl-env.sh
      - sync:fonts-wsl.conf

  sync:etc-file:
    label: sync:etc-file {{.FILE}}
    requires:
      vars: [FILE]
    cmds:
      - >-
        if [ ! -f /etc/{{.FILE}} ] || [ etc/{{.FILE}} -nt /etc/{{.FILE}} ]; then
          [ -d /etc/{{dir .FILE}} ] || sudo mkdir -p /etc/{{dir .FILE}};
          sudo cp --preserve=timestamps etc/{{.FILE}} /etc/{{.FILE}};
        else
          cp --preserve=timestamps /etc/{{.FILE}} etc/{{.FILE}};
        fi
    status:
      - test -f /etc/{{.FILE}}
      - test $(stat -c %Y etc/{{.FILE}}) -eq $(stat -c %Y /etc/{{.FILE}})
    internal: true

  sync:fstab:
    - task: sync:etc-file
      vars: { FILE: fstab }

  sync:locale.gen:
    - task: sync:etc-file
      vars: { FILE: locale.gen }
    - task: gen:locale

  sync:locale.conf:
    - task: sync:etc-file
      vars: { FILE: locale.conf }

  sync:pacman-mirrorlist:
    - task: sync:etc-file
      vars: { FILE: pacman.d/mirrorlist }

  sync:resolv.conf:
    - test ! -L /etc/resolv.conf || sudo unlink /etc/resolv.conf
    - task: sync:etc-file
      vars: { FILE: resolv.conf }

  sync:systemd-resolved.conf:
    - task: sync:etc-file
      vars: { FILE: systemd/resolved.conf }

  sync:timesyncd.conf:
    - task: sync:etc-file
      vars: { FILE: systemd/timesyncd.conf }

  sync:systemd-timesyncd.service:
    - task: sync:etc-file
      vars: { FILE: systemd/system/systemd-timesyncd.service.d/override.conf }

  sync:wsl.conf:
    - task: sync:etc-file
      vars: { FILE: wsl.conf }

  sync:drop-wsl-env.sh:
    - task: sync:etc-file
      vars: { FILE: profile.d/drop-wsl-env.sh }

  sync:fonts-wsl.conf:
    - task: sync:etc-file
      vars: { FILE: fonts/conf.d/00-wsl.conf }

  gen:locale:
    cmds:
      - sudo locale-gen
    sources:
      - /etc/locale.gen
    method: checksum

  sync:win:
    deps:
      - sync:winterm-settings.json
      - sync:keyhac-config.py

  sync:win-file:
    label: sync:win-file {{.WIN_FILE}} {{.REPO_FILE}}
    requires:
      vars:
        - WIN_FILE
        - REPO_FILE
    cmds:
      - >-
        if [ ! -f {{.WIN_FILE}} ] || [ {{.REPO_FILE}} -nt {{.WIN_FILE}} ]; then
          cp --preserve=timestamps --no-preserve=mode {{.REPO_FILE}} {{.WIN_FILE}};
        else
          cp --preserve=timestamps --no-preserve=mode {{.WIN_FILE}} {{.REPO_FILE}};
        fi
    status:
      - test -f {{.WIN_FILE}}
      - test $(stat -c %Y {{.REPO_FILE}}) -eq $(stat -c %Y {{.WIN_FILE}})
    internal: true

  sync:winterm-settings.json:
    requires:
      vars: [LOCALAPPDATA]
    cmds:
      - task: sync:win-file
        vars:
          WIN_FILE: "{{.LOCALAPPDATA}}/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json"
          REPO_FILE: win/winterm/settings.json

  sync:keyhac-config.py:
    requires:
      vars: [APPDATA]
    cmds:
      - task: sync:win-file
        vars:
          WIN_FILE: "{{.APPDATA}}/Keyhac/config.py"
          REPO_FILE: win/keyhac/config.py

  sync:wsl:
    deps:
      - sync:wslconfig
      - sync:wslgconfig
      - sync:boot.ps1

  sync:wsl-file:
    requires:
      vars:
        - USERPROFILE
        - FILE
    cmds:
      - task: sync:win-file
        vars:
          WIN_FILE: "{{.USERPROFILE}}/{{.FILE}}"
          REPO_FILE: wsl/{{base .FILE}}
    internal: true

  sync:wslconfig:
    - task: sync:wsl-file
      vars: { FILE: .wslconfig }

  sync:wslgconfig:
    - task: sync:wsl-file
      vars: { FILE: .wslgconfig }

  sync:boot.ps1:
    requires:
      vars: [WSL_DISTRO_NAME]
    cmds:
      - task: sync:wsl-file
        vars: { FILE: "AppData/Local/{{.WSL_DISTRO_NAME}}/boot.ps1" }

  deploy:wsl-icon:
    requires:
      vars:
        - LOCALAPPDATA
        - WSL_DISTRO_NAME
    cmds:
      - cp wsl/icon.png {{.LOCALAPPDATA}}/{{.WSL_DISTRO_NAME}}/icon.png
    status:
      - test -f {{.LOCALAPPDATA}}/{{.WSL_DISTRO_NAME}}/icon.png

  enable:corepack:
    cmds:
      - PATH=/usr/bin sudo corepack enable --install-directory /usr/local/bin
      - PATH=/usr/bin sudo corepack enable --install-directory /usr/local/bin npm
    status:
      - test -L /usr/local/bin/npm

  export:pkg:
    deps:
      - export:pacman
      - export:pacman-optdep
      - export:paru
      - export:winget
      - export:chocolatey
      - export:helm
      - export:cargo
      - export:julia
      - export:pipx
      - export:pnpm

  export:pacman: pacman -Qqen | grep -vxf pkg/pacman.ignore.txt > pkg/pacman.txt

  export:pacman-optdep: pacman -Qqdtt > pkg/pacman.optdep.txt

  export:paru: pacman -Qqem > pkg/paru.txt

  export:winget:
    cmds:
      - winget.exe export -o /tmp/winget.json
      - defer: rm /tmp/winget.json
      - >-
        jq '
          .[1] as $ignores
          | .[0]
          | .Sources[0].Packages
            |= reduce $ignores[] as $ignore (
              .;
              map(select(
                .PackageIdentifier
                | startswith($ignore)
                | not
              ))
            )
          | .Sources[0].Packages
            |= sort_by(.PackageIdentifier)
        '
        -s /tmp/winget.json pkg/winget.ignore.json
        > pkg/winget.json

  export:chocolatey:
    - rm pkg/chocolatey.xml
    - choco.exe export -o pkg/chocolatey.xml

  export:github-cli: gh extension list | cut -f 2 > pkg/github-cli.txt

  export:helm: helm plugin list | tail +2 | cut -f 1 | tr -d ' ' > pkg/helm.txt

  export:cargo:
    - cp ~/.cargo/.crates.toml pkg/cargo.toml
    - cp ~/.cargo/.install_config.toml pkg/cargo.config.toml

  export:julia: cp ~/.julia/environments/v1.8/Project.toml pkg/julia.toml

  export:pipx: pipx list --short | cut -d ' ' -f 1 > pkg/pipx.txt

  export:pnpm: pnpm ls -g --depth 0 | tail +6 | cut -d ' ' -f 1 > pkg/pnpm.txt
